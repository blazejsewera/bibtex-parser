use crate::s;

#[derive(Debug, PartialEq)]
pub(crate) enum EntryField {
    Abstract,
    Afterword,
    Annotation,
    Author,
    AuthorType,
    BookAuthor,
    BookPagination,
    BookSubtitle,
    Chapter,
    Commentator,
    Date,
    Doi,
    Edition,
    EditorType,
    Eid,
    EntrySubtype,
    EPrint,
    EPrintType,
    EPrintClass,
    EventDate,
    EventTitle,
    File,
    Foreword,
    Holder,
    HowPublished,
    IndexTitle,
    Institution,
    Introduction,
    Isan,
    Isbn,
    Ismn,
    Isrn,
    Issue,
    IssueSubtitle,
    IssueTitle,
    Iswc,
    JournalSubtitle,
    JournalTitle,
    Label,
    Language,
    Library,
    Location,
    MainSubtitle,
    MainTitle,
    Month,
    Note,
    Number,
    Organization,
    OrigDate,
    OrigLanguage,
    OrigLocation,
    OrigPublisher,
    OrigTitle,
    Pages,
    PageTotal,
    Pagination,
    Part,
    Publisher,
    PubState,
    ReprintTitle,
    Series,
    ShortAuthor,
    ShortEdition,
    Shorthand,
    ShorthandIntro,
    ShortJournal,
    ShortSeries,
    ShortTitle,
    Subtitle,
    Title,
    Translator,
    Type,
    Url,
    Venue,
    Version,
    Volume,
    Year,
    Other(String),
}

impl EntryField {
    pub(crate) fn from_str(s: &str) -> EntryField {
        match s {
            "abstract" => EntryField::Abstract,
            "afterword" => EntryField::Afterword,
            "annotation" => EntryField::Annotation,
            "annotator" => EntryField::Annotation,
            "author" => EntryField::Author,
            "authortype" => EntryField::AuthorType,
            "bookauthor" => EntryField::BookAuthor,
            "bookpagination" => EntryField::BookPagination,
            "booksubtitle" => EntryField::BookSubtitle,
            "booktitle" => EntryField::BookSubtitle,
            "chapter" => EntryField::Chapter,
            "commentator" => EntryField::Commentator,
            "date" => EntryField::Date,
            "doi" => EntryField::Doi,
            "edition" => EntryField::Edition,
            "editor" => EntryField::Edition,
            "editortype" => EntryField::EditorType,
            "eid" => EntryField::Eid,
            "entrysubtype" => EntryField::EntrySubtype,
            "eprint" => EntryField::EPrint,
            "eprinttype" => EntryField::EPrintType,
            "eprintclass" => EntryField::EPrintClass,
            "eventdate" => EntryField::EventDate,
            "eventtitle" => EntryField::EventTitle,
            "file" => EntryField::File,
            "foreword" => EntryField::Foreword,
            "holder" => EntryField::Holder,
            "howpublished" => EntryField::HowPublished,
            "indextitle" => EntryField::IndexTitle,
            "institution" => EntryField::Institution,
            "introduction" => EntryField::Introduction,
            "isan" => EntryField::Isan,
            "isbn" => EntryField::Isbn,
            "ismn" => EntryField::Ismn,
            "isrn" => EntryField::Isrn,
            "issue" => EntryField::Issue,
            "issuesubtitle" => EntryField::IssueSubtitle,
            "issuetitle" => EntryField::IssueTitle,
            "iswc" => EntryField::Iswc,
            "journalsubtitle" => EntryField::JournalSubtitle,
            "journaltitle" => EntryField::JournalTitle,
            "label" => EntryField::Label,
            "language" => EntryField::Language,
            "library" => EntryField::Library,
            "location" => EntryField::Location,
            "mainsubtitle" => EntryField::MainSubtitle,
            "maintitle" => EntryField::MainTitle,
            "month" => EntryField::Month,
            "note" => EntryField::Note,
            "number" => EntryField::Number,
            "organization" => EntryField::Organization,
            "origdate" => EntryField::OrigDate,
            "origlanguage" => EntryField::OrigLanguage,
            "origlocation" => EntryField::OrigLocation,
            "origpublisher" => EntryField::OrigPublisher,
            "origtitle" => EntryField::OrigTitle,
            "pages" => EntryField::Pages,
            "pagetotal" => EntryField::PageTotal,
            "pagination" => EntryField::Pagination,
            "part" => EntryField::Part,
            "publisher" => EntryField::Publisher,
            "pubstate" => EntryField::PubState,
            "reprinttitle" => EntryField::ReprintTitle,
            "series" => EntryField::Series,
            "shortauthor" => EntryField::ShortAuthor,
            "shortedition" => EntryField::ShortEdition,
            "shorthand" => EntryField::Shorthand,
            "shorthandintro" => EntryField::ShorthandIntro,
            "shortjournal" => EntryField::ShortJournal,
            "shortseries" => EntryField::ShortSeries,
            "shorttitle" => EntryField::ShortTitle,
            "subtitle" => EntryField::Subtitle,
            "title" => EntryField::Title,
            "translator" => EntryField::Translator,
            "type" => EntryField::Type,
            "url" => EntryField::Url,
            "venue" => EntryField::Venue,
            "version" => EntryField::Version,
            "volume" => EntryField::Volume,
            "year" => EntryField::Year,
            _ => EntryField::Other(s!(s)),
        }
    }
}

impl std::fmt::Display for EntryField {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EntryField::Other(s) => write!(f, "{}", s.to_lowercase()),
            _ => write!(f, "{}", format!("{:?}", self).to_lowercase()),
        }
    }
}
